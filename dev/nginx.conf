worker_processes 1;
daemon off;

error_log /dev/stdout debug;

events {
  worker_connections 1024;
}

# This is for **DEVELOPMENT** only
http {
  lua_shared_dict rise 100m;

  access_log /dev/stdout;
  lua_code_cache off; # reload lua code in each request
  lua_package_path "$prefix/lualib/rise-nginx/?.lua;$prefix/lualib/rise-nginx/lua_modules/share/lua/5.1/?.lua;;";
  lua_package_cpath "$prefix/lualib/rise-nginx/lua_modules/lib/lua/5.1/?.so;;";

  resolver 169.254.169.253; # AWS default DNS

  proxy_cache_path /tmp/rise-nginx-cache levels=1:2 keys_zone=rise_zone:20m max_size=1G inactive=60m;

  # In prod, this should be "rise-edge/GIT_HASH" to aid debugging
  more_set_headers "Server: rise-edge/development";

  # public
  server {
    set $rise_prefix "";
    set $not_found_location "@404";

    listen 8080;

    location / {
      access_by_lua_file lualib/rise-nginx/prefix_main.lua;

      proxy_set_header X-Rise-Prefix $rise_prefix;

      proxy_cache rise_zone;
      proxy_cache_key $rise_prefix$request_uri;

      proxy_cache_valid 200 403 404 1y;
      proxy_cache_valid any 30s;

      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

      proxy_pass http://127.0.0.1:8082$request_uri;
      proxy_intercept_errors on;

      proxy_redirect off;

      proxy_hide_header x-amz-id-2;
      proxy_hide_header x-amz-request-id;
      proxy_ignore_headers set-cookie;
      proxy_hide_header set-cookie;
      proxy_set_header cookie "";

      add_header X-Rise-Cache $upstream_cache_status;
      add_header X-Frame-Options SAMEORIGIN;

      # 404 -> custom error page
      # 403 -> fall back to default error page
      error_page 403 =404 /404.html;
    }

    location = /404.html {
      root nginx/custom_html;
    }

    location @404 {
      access_log off;
      error_log off;

      # Use a non-existent docroot so that all requests processed by this block
      # will return a 404.
      root nginx/nonexistent;
      error_page 404 /404.html;
    }
  }

  # public ssl
  server {
    set $rise_prefix "";
    listen 8443 ssl;

    ssl_certificate /opt/openresty/nginx/certs/star.risecloud.dev.crt;
    ssl_certificate_key /opt/openresty/nginx/certs/star.risecloud.dev.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate_by_lua_file lualib/rise-nginx/ssl_main.lua;

    location / {
      access_by_lua_file lualib/rise-nginx/prefix_main.lua;
      proxy_set_header X-Rise-Prefix $rise_prefix;

      proxy_cache rise_zone;
      proxy_cache_key $rise_prefix$request_uri;

      proxy_cache_valid 200 403 404 1y;
      proxy_cache_valid any 30s;

      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

      proxy_pass http://127.0.0.1:8082$request_uri;
      proxy_intercept_errors on;

      proxy_redirect off;

      proxy_hide_header x-amz-id-2;
      proxy_hide_header x-amz-request-id;
      proxy_ignore_headers set-cookie;
      proxy_hide_header set-cookie;
      proxy_set_header cookie "";

      add_header X-Rise-Cache $upstream_cache_status;

      # 404 -> custom error page
      # 403 -> fall back to default error page
      error_page 403 =404 /404.html;
    }

    location = /404.html {
      root nginx/custom_html;
    }
  }


  # private - s3 handler
  server {
    set $rise_target "";

    listen 127.0.0.1:8082;

    location / {
      access_by_lua_file lualib/rise-nginx/main.lua;

      proxy_pass $scheme://$rise_target;
      proxy_redirect off;
    }
  }

  # private - local access only (cache invalidation api)
  server {
    set $rise_content_type "application/json";

    listen 127.0.0.1:8081;

    location / {
      access_by_lua_file lualib/rise-nginx/api_main.lua;

      more_set_headers "Content-Type: $rise_content_type";
    }
  }
}
